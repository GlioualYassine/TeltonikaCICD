name: CI/CD for Spring Boot Application with MySQL Connection

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: geo_location
        options: |
          --name=mysql-master
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Wait for MySQL to be ready
        run: |
          # Attendre que le service MySQL soit prêt
          until mysqladmin ping -h 127.0.0.1 --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/geo_location
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD:
        run: mvn clean install

      - name: Upload JAR via SCP with SSH Key Authentication
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 43.204.227.9
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          source: "target/*.jar"
          target: "/home/ubuntu/geolocation_api.jar"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH into AWS VM and Configure MySQL Connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 43.204.227.9
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          script: |
            # Arrêter l'ancienne instance de l'application si elle est en cours
            pgrep -f 'geolocation_api.jar' && pkill -f 'geolocation_api.jar' || echo "No running instance to stop."

            # Démarrer la nouvelle version de l'application
            setsid nohup java -jar /home/ubuntu/geolocation_api.jar > /home/ubuntu/geolocation_api.log 2>&1 &
            
            # Pause pour permettre le démarrage de l'application
            sleep 5
